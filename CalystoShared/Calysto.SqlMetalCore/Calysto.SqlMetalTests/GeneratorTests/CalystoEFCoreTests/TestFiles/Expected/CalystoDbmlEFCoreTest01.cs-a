//************************************************************
// Generated using CalystoEFCoreFluentGenerator for MSSQL
//************************************************************
using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Data;
using System.Data.Common;
using System.Linq;
using System.Linq.Expressions;
using System.Reflection;
using System.Threading.Tasks;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Internal;
using Microsoft.EntityFrameworkCore.Metadata;
using Calysto.EntityFrameworkCore;
using Calysto.Data.Direct;
using Calysto.Common;
using Calysto.Common.Extensions;

namespace CalystoUnittestNamespace
{
	/// <summary>
	/// CalystoEFCoreFluent for MSSQL
	/// </summary>
	public partial class dbCalystoUnittestDataContext : DbContext
	{
		#region Context constructors
		
		public dbCalystoUnittestDataContext(bool useLazyLoadingProxies)
			: base(new DbContextOptionsBuilder<dbCalystoUnittestDataContext>()
				.UsingThis(builder => { if (useLazyLoadingProxies) builder.UseLazyLoadingProxies(); })
				.Options)
		{
			OnCreated();
		}
		
		public dbCalystoUnittestDataContext(Action<DbContextOptionsBuilder<dbCalystoUnittestDataContext>> configure)
			: base(new DbContextOptionsBuilder<dbCalystoUnittestDataContext>()
				.UsingThis(builder => configure(builder))
				.Options)
		{
			OnCreated();
		}

		public dbCalystoUnittestDataContext(DbContextOptions<dbCalystoUnittestDataContext> options) : base(options)
		{
			OnCreated();
		}

		#endregion Context constructors

		#region OnConfiguring

		protected override void OnConfiguring(DbContextOptionsBuilder optionsBuilder)
		{
			if (!optionsBuilder.IsConfigured ||
				(!optionsBuilder.Options.Extensions.OfType<RelationalOptionsExtension>().Any(ext => !string.IsNullOrEmpty(ext.ConnectionString) || ext.Connection != null) &&
				!optionsBuilder.Options.Extensions.Any(ext => !(ext is RelationalOptionsExtension) && !(ext is CoreOptionsExtension))))
			{
				optionsBuilder.UseSqlServer(@"Data Source=.\MSSQL2019;Initial Catalog=dbCalystoUnittest;Integrated Security=True;Connect Timeout=30;");
			}
			CustomizeConfiguration(ref optionsBuilder);
			base.OnConfiguring(optionsBuilder);
		}

		partial void CustomizeConfiguration(ref DbContextOptionsBuilder optionsBuilder);

		#endregion OnConfiguring

		#region Context properties for tables

		public virtual DbSet<tblVehicle> tblVehicle { get; set; }

		#endregion Context properties for tables

		#region Context database functions

		/// <param name="amount">Float, DefaultValue = (double)(0)</param>
		/// <param name="amount2">Float, DefaultValue = (double)(-0.05)</param>
		/// <param name="fromCurrency">VarChar(10), DefaultValue = "EUR"</param>
		/// <param name="toCurrency">VarChar(10), DefaultValue = "HRK"</param>
		/// <param name="exchangeRateDate">DateTime, DefaultValue = null</param>
		/// <returns>Scalar value from function</returns>
		public double? fnConvertCurrency(
			double? amount = (double)(0), 
			double? amount2 = (double)(-0.05), 
			string fromCurrency = "EUR", 
			string toCurrency = "HRK", 
			DateTime? exchangeRateDate = null)
		{
			return this.ExecuteList<double?>($@"select dbo.fnConvertCurrency({{0}}, {{1}}, {{2}}, {{3}}, {{4}})", amount, amount2, fromCurrency, toCurrency, exchangeRateDate).First();
		}

		/// <param name="skip111">Int</param>
		/// <param name="take111">Int, DefaultValue = (int)(50)</param>
		/// <param name="validOnDate">DateTime, DefaultValue = null</param>
		/// <param name="valuta">VarChar(50), DefaultValue = null</param>
		/// <returns>Scalar value from function</returns>
		public ValutaTecaj fnGetBankaValutaTecaj(
			int? skip111, 
			int? take111 = (int)(50), 
			DateTime? validOnDate = null, 
			string valuta = null)
		{
			return this.ExecuteList<ValutaTecaj>($@"select dbo.fnGetBankaValutaTecaj({{0}}, {{1}}, {{2}}, {{3}})", skip111, take111, validOnDate, valuta).First();
		}

		/// <param name="csvValues">VarChar(MAX)</param>
		/// <returns>Scalar value from function</returns>
		public int? fnGetRandomIntegerValue(string csvValues)
		{
			return this.ExecuteList<int?>($@"select dbo.fnGetRandomIntegerValue({{0}})", csvValues).First();
		}

		/// <returns>Scalar value from function</returns>
		public fnGetStariNoviGranicaResult fnGetStariNoviGranica()
		{
			return this.ExecuteList<fnGetStariNoviGranicaResult>($@"select dbo.fnGetStariNoviGranica()").First();
		}

		/// <param name="num1">Float</param>
		/// <param name="num2">Float</param>
		/// <returns>Scalar value from function</returns>
		public double? fnSumNumbers(
			double? num1, 
			double? num2)
		{
			return this.ExecuteList<double?>($@"select dbo.fnSumNumbers({{0}}, {{1}})", num1, num2).First();
		}

		/// <param name="skip">Int, DefaultValue = (int)(0)</param>
		/// <param name="take">Int, DefaultValue = (int)(100)</param>
		/// <param name="res">Int</param>
		/// <returns>MultipleResults from stored procedure</returns>
		public spMultiResultsMultipleResults spMultiResults(
			int? skip, 
			int? take, 
			ref int? res)
		{
			var multiple_results_1 = this.ExecuteMultipleResults($@"declare @return_value int; 
					exec @return_value = dbo.spMultiResults {{0}}, {{1}}, {{2}} out; 
					select @return_value as ReturnValue;", skip, take, res);
			var final_result_1 = multiple_results_1.ReadResults(res => new spMultiResultsMultipleResults()
			{
				Item1 = res.GetSequence<spMultiResultsResult1>().ToList(),
				Items2 = res.GetSequence<double?>().Single(),
				ResultX = res.GetSequence<int?>().ToList(),
				ResultY = res.GetSequence<spMultiResultsResult2>().ToList(),
				MyReturn = res.GetSequence<int>().Single(),
			});
			// read Output parameter from stored procedure
			res = Calysto.Utility.CalystoTypeConverter.ChangeType<int?>(multiple_results_1.Command.Parameters[2].Value);
			return final_result_1;
		}

		/// <returns>MultipleResults from stored procedure</returns>
		public spMultiResults2MultipleResults spMultiResults2()
		{
			var multiple_results_1 = this.ExecuteMultipleResults($@"declare @return_value int; 
					exec @return_value = dbo.spMultiResults2; 
					select @return_value as ReturnValue;");
			var final_result_1 = multiple_results_1.ReadResults(res => new spMultiResults2MultipleResults()
			{
				Clients = res.GetSequence<int>().ToList(),
				Owners = res.GetSequence<double?>().ToList(),
				Vehicles = res.GetSequence<tblVehicle>().ToList(),
				Result4 = res.GetSequence<spMultiResults2Result>().ToList(),
				ReturnValue = res.GetSequence<int>().Single(),
			});
			return final_result_1;
		}

		/// <param name="total">Int</param>
		/// <returns></returns>
		public DataSet spNoTablesResults2(ref int? total)
		{
			return this.ExecuteDataSet($@"exec dbo.spNoTablesResults2 {{0}} out", total);
		}

		/// <returns></returns>
		public DataTable spRandomNumber()
		{
			return this.ExecuteDataSet($@"exec dbo.spRandomNumber").Tables[0];
		}

		/// <returns></returns>
		public DataSet guest_fnGetStariNoviGranica()
		{
			return this.ExecuteDataSet($@"select * from guest.fnGetStariNoviGranica()");
		}


		#endregion Context database functions

		#region OnModelCreating

		protected override void OnModelCreating(ModelBuilder modelBuilder)
		{
			this.Map_tblVehicle(modelBuilder);
			this.Customize_tblVehicle(modelBuilder);

			RelationshipsMapping(modelBuilder);
			CustomizeMapping(ref modelBuilder);
		}

		#endregion

		#region TablesMappingDetails

		#region tblVehicle
		private void Map_tblVehicle(ModelBuilder modelBuilder)
		{
			modelBuilder.Entity<tblVehicle>().ToTable("tblVehicle", "dbo");
			modelBuilder.Entity<tblVehicle>().HasKey(x=>x.VehicleID);
			modelBuilder.Entity<tblVehicle>().Property(x=>x.VehicleID).HasColumnName("VehicleID").HasColumnType("Int").IsRequired().ValueGeneratedOnAdd();
			modelBuilder.Entity<tblVehicle>().Property(x=>x.VehicleRipID).HasColumnName("VehicleRipID").HasColumnType("Int").IsRequired().ValueGeneratedNever();
		}

		partial void Customize_tblVehicle(ModelBuilder modelBuilder);
		#endregion

		#endregion

		#region Relationships mapping
		private void RelationshipsMapping(ModelBuilder modelBuilder)
		{
		}
		#endregion

		#region Other details
		partial void CustomizeMapping(ref ModelBuilder modelBuilder);
		
		public bool HasChanges()
		{
		    return ChangeTracker.Entries().Any(e => e.State == Microsoft.EntityFrameworkCore.EntityState.Added || e.State == Microsoft.EntityFrameworkCore.EntityState.Modified || e.State == Microsoft.EntityFrameworkCore.EntityState.Deleted);
		}
		
		partial void OnCreated();
		#endregion

	}

	#region Entity Tables

	#region dbo.tblVehicle
	public partial class tblVehicle : EFCoreEntityBase<tblVehicle>
	{
		public tblVehicle()
		{
			OnCreated();
		}

		public tblVehicle(DbContext context) : base(context)
		{
			OnCreated();
		}

		#region Columns
		/// <summary>
		/// DbType = "Int NOT NULL IDENTITY", IsPrimaryKey = true, IsDbGenerated = true, AutoSync = AutoSync.OnInsert
		/// </summary>
		public int VehicleID { get; set; }

		/// <summary>
		/// DbType = "Int NOT NULL"
		/// </summary>
		public int VehicleRipID { get; set; }

		#endregion Columns

		#region Associations
		#endregion Associations

		partial void OnCreated();
	}
	#endregion dbo.tblVehicle


	#endregion

	#region Functions Return types

	#region fnGetStariNoviGranicaResult
	public partial class fnGetStariNoviGranicaResult
	{
		public fnGetStariNoviGranicaResult(){ }

		/// <summary>
		/// DbType = "DateTime NOT NULL"
		/// </summary>
		public DateTime StartDate { get; set; }

		/// <summary>
		/// DbType = "DateTime NOT NULL"
		/// </summary>
		public DateTime EndDate { get; set; }

	}
	#endregion fnGetStariNoviGranicaResult

	#region spMultiResultsMultipleResults
	public partial class spMultiResultsMultipleResults
	{
		public spMultiResultsMultipleResults(){ }

		public List<spMultiResultsResult1> Item1 { get; set; }

		public double? Items2 { get; set; }

		public List<int?> ResultX { get; set; }

		public List<spMultiResultsResult2> ResultY { get; set; }

		public int MyReturn { get; set; }

	}
	#endregion spMultiResultsMultipleResults

	#region spMultiResults2MultipleResults
	public partial class spMultiResults2MultipleResults
	{
		public spMultiResults2MultipleResults(){ }

		public List<System.Int32> Clients { get; set; }

		public List<double?> Owners { get; set; }

		public List<tblVehicle> Vehicles { get; set; }

		public List<spMultiResults2Result> Result4 { get; set; }

		public int ReturnValue { get; set; }

	}
	#endregion spMultiResults2MultipleResults

	#region spMultiResultsResult1
	public partial class spMultiResultsResult1
	{
		public spMultiResultsResult1(){ }

		/// <summary>
		/// DbType = "DateTime NOT NULL"
		/// </summary>
		public DateTime CurrentDate1 { get; set; }

	}
	#endregion spMultiResultsResult1

	#region spMultiResultsResult2
	public partial class spMultiResultsResult2
	{
		public spMultiResultsResult2(){ }

		/// <summary>
		/// DbType = "DateTime NOT NULL"
		/// </summary>
		public DateTime CurrentDate2 { get; set; }

	}
	#endregion spMultiResultsResult2

	#region spMultiResults2Result
	public partial class spMultiResults2Result
	{
		public spMultiResults2Result(){ }

		/// <summary>
		/// DbType = "Int NOT NULL"
		/// </summary>
		public int Ordinal { get; set; }

		/// <summary>
		/// DbType = "VarChar(6) NOT NULL"
		/// </summary>
		public string Name { get; set; }

	}
	#endregion spMultiResults2Result

	#endregion

}
