class CPromise{constructor(n){if(this.executor=n,this.executor){try{this.executor(i=>this.notifyResolved(i),r=>this.notifyRejected(r))}catch(t){this.notifyRejected(t)}}}notifyResolved(u){this._isResolved=!0;this._resolveValue=u,this.notifyNext()}static Method(f){return f}async Method2(e,o,s){return s+o}static async Method3(h){return h}static async Method4(c,l){return await CPromise.Method3(c,l)}static UseTryCatch(a,v,y){try{return v(a)}catch{return y}finally{return 3333}}static UseTryCatch2(p,w,b){try{return w(p)}catch(k){return b}finally{return 4321}}static UseTryCatch3(d,g){try{return g(d)}catch{}}}class NewClass{constructor(n){this._name=n}}